components:
  schemas:
    Login:
      type: object
      properties:
        email:
          type: string
          example: test@gmail.com
        password:
          type: string
          example: thuy2002
    successAuthentication:
      type: object
      properties:
        status:
          type: number
          example: 200
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    User:
      type: object
      properties:
        user:
          type: object
          properties:
            _id:
              type: string
              example: 657aabf48805b0c9a20c0d42
            email:
              type: string
              example: test@gmail.com
            username:
              type: string
              example: testuser
            date_birth:
              type: string
              example: 2023-12-14T07:17:08.676Z
            tweeter_circle:
              type: array
              example: []
            bio:
              type: string
              example: 'My job is .....'
            location:
              type: string
              example: 'Ha Noi, Viet Nam'
            avatar:
              type: string
              example: 'http://placeholder.co/600x400?text=test'
            cover_photo:
              type: string
              example: 'http://placeholder.co/600x400?text=test&bg=white'
    VerifyStatus:
      type: string
      enum: ['Verified', 'Unverified', 'Banner']
      example: 'Verified'
  securitySchemes:
    BearerAuth:
      scheme: bearer
      type: http
      bearerFormat: JWT
      description: Tokens send with request will be to authorization
